on: [push]

name: CI

jobs:
  build_and_test:
    name: Rust project
    runs-on: ubuntu-latest
    if: false
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install APT dependencies
        run: sudo apt-get update && sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev protobuf-compiler libprotobuf-dev doxygen
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Run the tests
        run: |
          # `cargo test --doc` does not find the dynamic library, on the contrary to
          # `cargo test --lib`. This is an issue as running `cargo test` fails because
          # cargo does not find libOpenMM when running the doctests.
          # This issue is reported upstream in <https://github.com/rust-lang/cargo/issues/8531>.
          # It is fixed upstream, but the fix will only be released as part of rust 1.78 in May.
          # When the fix will be released, we can just run `cargo test`.
          cargo test --lib 2>&1 | tee test.log
          LD_LIBRARY_PATH=$(grep -oP '(?<=The OpenMM library was built and installed in `)[^`]*' test.log)/lib cargo test --doc
        env:
          RUST_BACKTRACE: full
          RUST_LOG: trace
  windows_tests:
    if: false
    name: Rust tests on Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: |
          choco install -y doxygen.install protoc
      - name: Run the tests
        run: cargo test
        env:
          RUST_BACKTRACE: full
          RUST_LOG: trace
  macos_tests:
    if: false
    name: Rust tests on MacOS
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: |
          brew install doxygen protobuf
      - name: Run the tests
        run: cargo test
        env:
          RUST_BACKTRACE: full
          RUST_LOG: trace
  macos_build:
    name: Build MacOS artefact
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: |
          brew install doxygen protobuf grep coreutils
          echo /opt/homebrew/opt/coreutils/libexec/gnubin >> $GITHUB_PATH
          echo $PATH >> $GITHUB_PATH
      - run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs -o rustup.sh
          bash rustup.sh -y
          echo ~/.cargo/bin >> $GITHUB_PATH
      - name: Generate the build
        run: |
          echo $PATH
          which grep
          cargo build --release 2>&1 | tee build.log
          ls -ltra target/release
          mkdir output
          cp -r $(grep -oP '(?<=The OpenMM library was built and installed in `)[^`]*' build.log)/lib/* output
          cp target/release/nanover-{cli,gui} output
          chmod -R u+x output/*
          ls -ltr output
        env:
          RUST_BACKTRACE: full
          RUST_LOG: trace
          PATH: 
      - uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: output
  linux_build:
    name: Linux build
    runs-on: ubuntu-latest
    if: false
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install APT dependencies
        run: sudo apt-get update && sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev protobuf-compiler libprotobuf-dev doxygen
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Generate the build
        run: |
          cargo build --release 2>&1 | tee build.log
          ls -ltra target/release
          mkdir output
          cp -r $(grep -oP '(?<=The OpenMM library was built and installed in `)[^`]*' build.log)/lib/* output
          cp target/release/nanover-{cli,gui} output
          chmod -R u+x output/*
          ls -ltr output
        env:
          RUST_BACKTRACE: full
          RUST_LOG: trace
      - uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: output
  lint:
      name: Lint
      runs-on: ubuntu-latest
      if: false
      steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install APT dependencies
        run: sudo apt-get update && sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev protobuf-compiler libprotobuf-dev doxygen
      - name: Clippy
        run: cargo clippy -- --deny warnings
  format:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Format
        run: cargo fmt --check
